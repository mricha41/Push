#include "states/MenuScreen.hpp"

#include <stdio.h>
#include <vector>

#include <glm\gtc\type_ptr.hpp>

#include <SDL2/SDL_opengl.h>

#include "core/Game.hpp"
#include "graphics/Camera.hpp"
#include "graphics/Text.hpp"
#include "graphics/GLSprite.hpp"
#include "graphics/TriangleShape.hpp"
#include "graphics/RectangleShape.hpp"
#include "graphics/Mesh.hpp"
#include "graphics/GLTexture.hpp"
#include "graphics/Shader.hpp"
#include "lighting/AmbientLight.hpp"
#include "lighting/DiffuseLight.hpp"
#include "lighting/Material.hpp"
//#include "steeriously/libinc.hpp"
#include "core/GameController.hpp"

MenuScreen::MenuScreen()
:
    ScreenState()
{
    m_running = false;

    setState(menuState::s_uninitialized);

    if(!m_texture.loadTexture("images/menu.png", pk::Game::getWindow()->getRenderer()))
        printf("Could not load texture!");

    SDL_Rect sprRect;
    sprRect.x = 0;
    sprRect.y = 0;
    sprRect.w = m_texture.getWidth();
    sprRect.h = m_texture.getHeight();
    m_sprite = pk::Sprite(&m_texture, sprRect);

    m_font = new pk::Font();

    if(m_font->loadFont("fonts/Sansation_Regular.ttf", 32))
    {
        m_text = new pk::Text(m_font, &m_textTexture, {0,0,0,0}, "Hello, World!");
    }
    else
    {
        printf("Could not load the font! Error:%s\n", SDL_GetError());
    }

    m_text->setRenderMode(pk::Text::renderMode::blendedWrapped, pk::Game::getInstance().getWindow()->getWindowRect().w/2);

    m_music=Mix_LoadMUS("sound/title.ogg");
    if(!m_music)
    {
        printf("Mix_LoadMUS(\"title.ogg\"): %s\n", Mix_GetError());
    }

    Mix_VolumeMusic(20);

    //Mix_PlayMusic(m_music, -1);
}

MenuScreen::~MenuScreen()
{
    TTF_CloseFont(m_font->getFont());
    delete m_text;
    delete m_font;

    Mix_HaltMusic();
    Mix_FreeMusic(m_music);
}

void MenuScreen::display()
{
    setState(menuState::s_running);
    m_running = true;

    SDL_Event e;

    pk::Window* pkWin = pk::Game::getWindow();
    SDL_Window* win = pk::Game::getWindow()->getWindow();
    SDL_GLContext* context = &pk::Game::getWindow()->getContext();

    const char* tgvShader = "shaders/textured geometry/specular lighting/shader.vert";
    const char* tgfShader = "shaders/textured geometry/specular lighting/shader.frag";
	pk::Shader *tgShader = new pk::Shader();
	tgShader->load(tgvShader, tgfShader);

    pk::GLStates textured_glStates;
	textured_glStates.modelLocation = &tgShader->getModelLocation();
    textured_glStates.projectionLocation = &tgShader->getProjectionLocation();
    textured_glStates.viewLocation = &tgShader->getViewLocation();
    textured_glStates.ambientIntensityLocation = &tgShader->getAmbientIntensityLocation();
    textured_glStates.ambientColorLocation = &tgShader->getAmbientColorLocation();
    textured_glStates.diffuseIntensityLocation = &tgShader->getDiffuseIntensityLocation();
    textured_glStates.directionLocation = &tgShader->getDirectionLocation();
    textured_glStates.specularIntensityLocation = &tgShader->getSpecularIntensityLocation();
    textured_glStates.shininessLocation = &tgShader->getShininessLocation();
    textured_glStates.eyePositionLocation = &tgShader->getEyePositionLocation();

	const char* fvShader = "shaders/untextured geometry/specular lighting/shader.vert";
    const char* ffShader = "shaders/untextured geometry/specular lighting/shader.frag";
	pk::Shader *fShader = new pk::Shader();
	fShader->load(fvShader, ffShader);

    pk::GLStates flat_glStates;
    flat_glStates.modelLocation = &fShader->getModelLocation();
    flat_glStates.projectionLocation = &fShader->getProjectionLocation();
    flat_glStates.viewLocation = &fShader->getViewLocation();
    flat_glStates.ambientIntensityLocation = &fShader->getAmbientIntensityLocation();
    flat_glStates.ambientColorLocation = &fShader->getAmbientColorLocation();
    flat_glStates.diffuseIntensityLocation = &fShader->getDiffuseIntensityLocation();
    flat_glStates.directionLocation = &fShader->getDirectionLocation();
    flat_glStates.shininessLocation = &fShader->getShininessLocation();
    flat_glStates.specularIntensityLocation = &fShader->getSpecularIntensityLocation();
    flat_glStates.eyePositionLocation = &fShader->getEyePositionLocation();

    //glm::mat4 projection = glm::perspective(45.0f, 800.f / 600.f, 0.1f, 100.0f);
    glm::mat4 projection = glm::ortho(0.0f, 800.0f, 600.0f, 0.0f, 0.1f, 100.0f);

    SDL_GL_MakeCurrent(win, *context);
    glViewport(0, 0, 800, 600);
    glEnable(GL_BLEND);

    pk::GLTexture tex = pk::GLTexture("images/chomp.png");
    pk::GLSprite face = pk::GLSprite(tex, {0.f, 0.f, 48.f, 48.f});
    face.setPosition({400.f, 450.f});
    face.setScale({5.f, 5.f});
    face.getTexture()->setTextureFilterParameters(pk::GLTextureFilter::NEAREST, pk::GLTextureFilter::NEAREST);

    pk::GLSprite face2 = face;
    face2.setPosition({100.f, 450.f});

    pk::GLTexture f = pk::GLTexture("images/fish.png");
    pk::GLSprite fish = pk::GLSprite(f, {0.f, 0.f, 24.f, 16.f});
    fish.setPosition({100.f, 250.f});
    fish.setScale({5.f, 5.f});
    fish.getTexture()->setTextureFilterParameters(pk::GLTextureFilter::NEAREST, pk::GLTextureFilter::NEAREST);

    pk::GLSprite fish2 = fish;
    fish2.setPosition({400.f, 250.f});

    pk::Material shinyMaterial = pk::Material(2.0f, 320);
    pk::Material dullMaterial = pk::Material(0.3f, 4);

    pk::Camera cam = pk::Camera({0.f, 0.f});
    cam.setRect({0.f, 0.f, 800.f, 600.f});
    cam.setOrigin({400.f, 300.f});
    cam.setPosition({400.f, 300.f});
    cam.setScale({1.f, 1.f});

    pk::DiffuseLight mainLight = pk::DiffuseLight({1.0f, 1.0f, 1.0f, 1.0f}, 0.5f, cam.getOrigin().x/2.f, cam.getOrigin().y/2.f, -1.0f, 0.5f);
    pk::DiffuseLight secondLight = pk::DiffuseLight({1.0f, 1.0f, 1.0f, 1.0f}, 0.5f, 100.0f, 100.0f, -1.0f, 1.0f);

    printf("Controllers available: %d\n", SDL_NumJoysticks());

    pk::GameController controller1 = pk::GameController(0);
    printf("Controller name: %s\n", controller1.getControllerName());

    pk::GameController controller2 = pk::GameController(1);
    printf("Controller name: %s\n", controller2.getControllerName());

    pk::GameController controller3 = pk::GameController(2);
    printf("Controller name: %s\n", controller3.getControllerName());

    pk::GameController controller4 = pk::GameController(3);
    printf("Controller name: %s\n", controller4.getControllerName());

    while(isRunning())
    {
       while(SDL_PollEvent(&e))
        {
            //printf("Camera: %d,%d\n", cam.getPosition().x, cam.getPosition().y);
            if(e.type == SDL_QUIT)
            {
                setState(menuState::s_exit);
                return;
            }

            if(e.type == SDL_KEYDOWN)
            {
                switch(e.key.keysym.scancode)
                {
                case SDL_SCANCODE_A:
                {
                    cam.move({-10.f, 0.f});
                }
                break;
                case SDL_SCANCODE_D:
                {
                    cam.move({10.f, 0.f});
                }
                break;
                case SDL_SCANCODE_W:
                {
                    cam.move({0.f, -10.f});
                }
                break;
                case SDL_SCANCODE_S:
                {
                    cam.move({0.f, 10.f});
                }
                break;
                case SDL_SCANCODE_KP_4:
                {
                    cam.rotate(-5.f);
                }
                break;
                case SDL_SCANCODE_KP_6:
                {
                    cam.rotate(5.f);
                }
                break;
                case SDL_SCANCODE_KP_8:
                {
                    cam.scale({0.01f, 0.01f});
                }
                break;
                case SDL_SCANCODE_KP_2:
                {
                    cam.scale({-0.01f, -0.01f});
                }
                break;
                default:
                break;
                }
            }

            if(e.type == SDL_KEYUP)
            {
                switch(e.key.keysym.scancode)
                {
                case SDL_SCANCODE_ESCAPE:
                {
                    setState(menuState::s_exit);
                    return;
                }
                break;
                case SDL_SCANCODE_RETURN:
                {
                    setState(menuState::s_play);
                    return;
                }
                break;
                default:
                break;
                }
            }
        }

        if(controller1.getAxisState(pk::GameControllerAxis::LEFT_X) > 8000)
            face.move({10.f, 0.f});

        if(controller1.getAxisState(pk::GameControllerAxis::LEFT_X) < -8000)
            face.move({-10.f, 0.f});

        if(controller1.getAxisState(pk::GameControllerAxis::LEFT_Y) > 8000)
            face.move({0.f, 10.f});

        if(controller1.getAxisState(pk::GameControllerAxis::LEFT_Y) < -8000)
            face.move({0.f, -10.f});

        if(controller2.getAxisState(pk::GameControllerAxis::LEFT_X) > 8000)
            fish.move({10.f, 0.f});

        if(controller2.getAxisState(pk::GameControllerAxis::LEFT_X) < -8000)
            fish.move({-10.f, 0.f});

        if(controller2.getAxisState(pk::GameControllerAxis::LEFT_Y) > 8000)
            fish.move({0.f, 10.f});

        if(controller2.getAxisState(pk::GameControllerAxis::LEFT_Y) < -8000)
            fish.move({0.f, -10.f});

        glClear(GL_COLOR_BUFFER_BIT);

        /////////////////////////////////////////////////////////////////
        //RENDERING PASSES REQUIRE THE PROPER ORDER OF OPERATIONS!!!
        //OBEY!!!!!!!!!!
        /////////////////////////////////////////////////////////////////

        //make updates in the right order:
        //shader->lighting->view/camera->projection->models
        tgShader->use();

        mainLight.update(*textured_glStates.ambientIntensityLocation, *textured_glStates.ambientColorLocation, *textured_glStates.diffuseIntensityLocation, *textured_glStates.directionLocation);

        //initialize view with identity map1x...
        glm::mat4 view = glm::mat4(1.0f);
        //view must then be translated "above" the scene on the z-axis
        //by some arbitrary value so that the objects in the scene are not culled by OpenGL
        view = glm::translate(view, glm::vec3(0.0f, 0.0f, -0.1f));

        //pass the view to the camera to perform
        //camera-level (viewport) manipulations
        cam.update(textured_glStates, view);
        glUniform3f(*textured_glStates.eyePositionLocation, cam.getPosition().x, cam.getPosition().y, -0.1f);
        glUniformMatrix4fv(*textured_glStates.viewLocation, 1, GL_FALSE, glm::value_ptr(view));

        glUniformMatrix4fv(*textured_glStates.projectionLocation, 1, GL_FALSE, glm::value_ptr(projection));

        //begin model-level (graphical object) manipulations
        glm::mat4 model = glm::mat4(1.0f);
        glUniformMatrix4fv(*textured_glStates.modelLocation, 1, GL_FALSE, glm::value_ptr(model));

        shinyMaterial.use(*textured_glStates.specularIntensityLocation, *textured_glStates.shininessLocation);
        face.rotate(3.f);
        pkWin->draw(face, textured_glStates);
        pkWin->draw(face2, textured_glStates);
        fish.rotate(-3.f);
        pkWin->draw(fish, textured_glStates);
        pkWin->draw(fish2, textured_glStates);

        glUseProgram(0);

        SDL_GL_SwapWindow(win);
    }
}
